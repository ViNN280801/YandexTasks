#include <iostream>

int main()
{
    // Ищем последовательность длины n, где не стоят три единицы подряд
    int n;
    std::cin >> n;

    // Граничный случай - длина не может быть отрицательной или 0
    // и не может быть больше 35
    if (n <= 0 || n > 35)
    {
        std::cout << "0" << std::endl;
        return EXIT_SUCCESS;
    }

    // Если длина последовательности равна 1, то ответ 2
    // Так как последовательность может начинаться с 0 или 1
    if (n == 1)
    {
        std::cout << "2" << std::endl;
        return EXIT_SUCCESS;
    }

    // Если длина = 2, то у нас 4 варианта
    // 00, 01, 10, 11
    if (n == 2)
    {
        std::cout << "4" << std::endl;
        return EXIT_SUCCESS;
    }

    // Если длина = 3, то у нас 8 вариантов
    // 000, 001, 010, 011, 100, 101, 110, 111
    // но 111 не считается, так как три единицы подряд
    // значит остается 7 вариантов
    if (n == 3)
    {
        std::cout << "7" << std::endl;
        return EXIT_SUCCESS;
    }

    // Предположим, что длина 4, тогда у нас такие последовательности
    // 0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111
    // но так как нельзя считать три рядом стоящие единицы, то остается 13 вариантов

    // Предположим, что длина 5, тогда у нас такие последовательности
    // 00000, 00001, 00010, 00011, 00100, 00101, 00110, 00111, 01000, 01001,
    // 01010, 01011, 01100, 01101, 01110, 01111, 10000, 10001, 10010, 10011,
    // 10100, 10101, 10110, 10111, 11000, 11001, 11010, 11011, 11100, 11101,
    // 11110, 11111
    // но так как нельзя считать три рядом стоящие единицы, то остается 24 варианта

    // Какой паттерн можно увидеть?
    // 1 -> 2
    // 2 -> 4
    // 3 -> 7
    // 4 -> 13
    // 5 -> 24
    // Видим, что это последовательность Фибоначчи
    // Но есть одно но - последовательность начинается с 2, 4, 7
    // Значит нам нужно вычислить первые три члена последовательности
    // и затем использовать формулу для вычисления последующих
    // F(n) = F(n-1) + F(n-2) + F(n-3)
    // где F(n) - количество вариантов для длины n
    // F(n-1) - количество вариантов для длины n-1
    // F(n-2) - количество вариантов для длины n-2
    // F(n-3) - количество вариантов для длины n-3
    // Таким образом можно задать массив и заполнить его
    // и вывести последний элемент массива
    int arr[36]; // 36 элементов, так как n не может быть больше 35, и есть 0 элемент в массиве
    arr[0] = 0;
    arr[1] = 2;
    arr[2] = 4;
    arr[3] = 7;

    for (short i = 4; i <= n; i++)
        arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];

    std::cout << arr[n] << std::endl;
    return EXIT_SUCCESS;
}
